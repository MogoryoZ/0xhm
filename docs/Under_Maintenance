<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Under Maintenance | 0xHM</title>
  <style>
    :root {
      --hacker-green: #00ff41;
      --hacker-grayish: #d8d8d8;
      --hacker-white: #ffffff;
      --background-dark: #000;
      --text-font: 'Courier New', monospace;
      --button-bg: rgba(0, 255, 65, 0.1);
      --button-border: #00ff41;
      --button-hover-bg: rgba(0, 255, 65, 0.3);
      --button-hover-shadow: #00ff41;
    }

    body {
      margin: 0;
      padding: 0;
      color: var(--hacker-green);
      font-family: var(--text-font);
      background-color: var(--background-dark);
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100vh;
      text-align: center;
      user-select: none;
    }

    #stars-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
      overflow: hidden;
    }

    .maintenance-text {
      font-size: 8vw;
      font-weight: bold;
      letter-spacing: 0.5rem;
      display: inline-block;
      margin-bottom: 1rem;
      text-shadow:
        0 0 10px currentColor,
        0 0 20px currentColor,
        0 0 30px currentColor,
        0 0 40px currentColor;
    }

    .subtext {
      font-size: 1.5rem;
      margin-bottom: 3rem;
      color: var(--hacker-green);
      text-shadow:
        0 0 8px currentColor,
        0 0 15px currentColor;
      font-style: italic;
    }

    .btn-container {
      display: flex;
      gap: 2rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    button {
      background: var(--button-bg);
      border: 2px solid var(--button-border);
      color: var(--hacker-green);
      padding: 0.85rem 3rem;
      font-family: var(--text-font);
      font-size: 1.25rem;
      cursor: pointer;
      border-radius: 8px;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 0.15rem;
      box-shadow: 0 0 5px rgba(0, 255, 65, 0.4);
      user-select: none;
    }

    button:hover {
      background: var(--button-hover-bg);
      box-shadow:
        0 0 15px var(--button-hover-shadow),
        0 0 30px var(--button-hover-shadow),
        0 0 40px var(--button-hover-shadow);
      color: #e0ffe0;
    }

    .star {
      position: absolute;
      background: #fff;
      border-radius: 50%;
      animation: twinkle var(--duration) infinite ease-in-out;
      opacity: 0;
    }

    @keyframes twinkle {
      0%, 100% { opacity: 0; transform: scale(0.5); }
      50% { opacity: 1; transform: scale(1); }
    }
  </style>
</head>
<body>
  <div id="stars-bg"></div>

  <div>
    <div class="maintenance-text" aria-label="Under Maintenance">UNDER MAINTENANCE</div>
    <div class="subtext">We are currently performing scheduled maintenance. Please check back soon.</div>

    <div class="btn-container">
      <button onclick="history.back()">Go Back</button>
      <button onclick="window.location.href='index.html'">Go To Home</button>
    </div>
  </div>

<script>
  const starsBg = document.getElementById('stars-bg');
  const starsCount = 150;
  const stars = [];

  for (let i = 0; i < starsCount; i++) {
    const star = document.createElement('div');
    star.classList.add('star');
    
    const size = Math.random() * 2 + 0.5;
    star.style.width = `${size}px`;
    star.style.height = `${size}px`;
    star.style.opacity = 0.8;

    star.x = Math.random() * window.innerWidth;
    star.y = Math.random() * window.innerHeight;

    star.vx = (Math.random() - 0.5) * 0.3;
    star.vy = (Math.random() - 0.5) * 0.3;

    star.style.left = star.x + 'px';
    star.style.top = star.y + 'px';

    starsBg.appendChild(star);
    stars.push(star);
  }

  function animateStars() {
    for (const star of stars) {
      star.x += star.vx;
      star.y += star.vy;

      if (star.x < 0 || star.x > window.innerWidth) star.vx = -star.vx;
      if (star.y < 0 || star.y > window.innerHeight) star.vy = -star.vy;

      star.style.left = star.x + 'px';
      star.style.top = star.y + 'px';
    }
    requestAnimationFrame(animateStars);
  }

  animateStars();

  window.addEventListener('resize', () => {
    for (const star of stars) {
      if (star.x > window.innerWidth) star.x = window.innerWidth;
      if (star.y > window.innerHeight) star.y = window.innerHeight;
    }
  });
</script>
</body>
</html>
